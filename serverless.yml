service: aws-serverless-task-manager-api

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  lambdaHashingVersion: 20201221
  memorySize: 256
  stage: dev
  region: us-west-2

  environment:
    TASKS_TABLE: ${self:service}-${self:provider.stage}-tasks
    JWT_SECRET: ${self:custom.dotenvVars.JWT_SECRET}
    SNS_TOPIC_ARN: !Ref ErroringLambdaAlarmTopic
    CUSTOM_REGION: ${self:provider.region}
    DEFAULT_PAGINATION_LIMIT: 5

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - sns:Publish
          Resource:
            - { "Fn::GetAtt": ["TasksTable", "Arn"] }
            - !Ref ErroringLambdaAlarmTopic
        - Effect: "Allow"
          Action:
            - sns:Subscribe
          Resource:
            - !Ref ErroringLambdaAlarmTopic

custom:
  dotenvVars: ${file(config.js)}

package:
  patterns:
    - config/**

functions:
  createTask:
    handler: src/handlers/createTask.createTask
    memorySize: 128 #mb
    timeout: 5 #seconds
    events:
      - httpApi:
          path: /tasks
          method: post
  getTasks:
    handler: src/handlers/getTasks.getTasks
    memorySize: 128 #mb
    timeout: 5 #seconds
    events:
      - httpApi:
          path: /tasks
          method: get
  getTask:
    handler: src/handlers/getTask.getTask
    memorySize: 128 #mb
    timeout: 5 #seconds
    events:
      - httpApi:
          path: /tasks/{id}
          method: get
  updateTask:
    handler: src/handlers/updateTask.updateTask
    memorySize: 128 #mb
    timeout: 5 #seconds
    events:
      - httpApi:
          path: /tasks/{id}
          method: put
  deleteTask:
    handler: src/handlers/deleteTask.deleteTask
    memorySize: 128 #mb
    timeout: 5 #seconds
    events:
      - httpApi:
          path: /tasks/{id}
          method: delete
  subscribeToSNS:
    handler: src/handlers/subscribeToSNS.handler
    events:
      - http:
          path: subscribe
          method: post
    environment:
      SNS_TOPIC_ARN: !Ref ErroringLambdaAlarmTopic

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-typescript

resources:
  Resources:
    TasksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TASKS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ErroringLambdaAlarmTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ErroringLambdaAlarmTopic

    ErroringLambdaAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmDescription: "Alarm when any function errors exceed threshold"
        MetricName: "Errors"
        Namespace: "AWS/Lambda"
        Statistic: "Sum"
        Period: "60"
        EvaluationPeriods: "1"
        Threshold: "1"
        ComparisonOperator: "GreaterThanOrEqualToThreshold"
        AlarmActions:
          - !Ref ErroringLambdaAlarmTopic
        Dimensions:
          - Name: FunctionName
            Value: !Ref CreateTaskLambdaFunction
        TreatMissingData: notBreaching

    HttpApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: !Sub "${self:service}-${self:provider.stage}"
        ProtocolType: HTTP
        CorsConfiguration:
          AllowHeaders:
            - Content-Type
            - X-Amz-Date
            - Authorization
            - X-Api-Key
          AllowOrigins:
            - "*"
          AllowMethods:
            - OPTIONS
            - GET
            - POST
            - PUT
            - DELETE
          AllowCredentials: false
          MaxAge: 600

    APIGateway4xxErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: APIGateway4xxErrorAlarm
        AlarmDescription: Alarm for monitoring 4xx errors in API Gateway
        MetricName: 4xx
        Namespace: AWS/Http
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        AlarmActions:
          - !Ref ErroringLambdaAlarmTopic
        Dimensions:
          - Name: ApiId
            Value: !Ref HttpApi
        TreatMissingData: notBreaching

    APIGateway5xxErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: APIGateway5xxErrorAlarm
        AlarmDescription: Alarm for monitoring 5xx errors in API Gateway
        MetricName: 5xx
        Namespace: AWS/Http
        Statistic: Sum
        Period: 60
        EvaluationPeriods: 1
        Threshold: 1
        ComparisonOperator: GreaterThanOrEqualToThreshold
        AlarmActions:
          - !Ref ErroringLambdaAlarmTopic
        Dimensions:
          - Name: ApiId
            Value: !Ref HttpApi
        TreatMissingData: notBreaching
